new release
=============
1. remove old code
2. download new code
3. restart the server

changes in existing servers
============================
20 servers --> downtime should be there

connect to the servers using ansible
fetch the ip using dynamic inventory
run ansible playbook against all the servers

another method
============================
provision new instance
configure it using ansible
	connect to it
	run the playbook

stop the instance
take AMI

update auto scaling group --> 5 old version application instances
Rolling update
provision one new instance with new AMI, delete one old version server
provision second new instance with new AMI, delete second old version server
.
.
provision fifth new instance with new AMI, delete fifth old version server

Launch template --> instance creation inputs
AMI
SG ID
Subnet
Which target group

null resource will not create any new resource, it is used to connect to the instances, copy the scripts, execute the scripts through provisioners. It has a trigger attribute to take actions when something is changed like instance id.

terraform variables --> shell --> ansible


1. instance creation
2. connect to server using connection block
3. copy the shell script into server using file provisioner block
	install ansible
	ansible-pull -i localhost -U URL main.yaml -e component=backend -e environment=dev
4. remote-exec
	chmod +x backend.sh
	sudo sh backend.sh
5. ansible configures backend
6. stop instance
7. take the AMI
8. create target group
9. launch template --> AMI
10. ASG -->> launch template